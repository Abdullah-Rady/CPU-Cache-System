data Item a = It Tag (Data a) Bool Int | NotPresent deriving (Show, Eq)
data Tag = T Int deriving (Show, Eq)
data Data a = D a deriving (Show, Eq)
data Output a = Out (a, Int) | NoOutput deriving (Show, Eq)

convertStringToInt x = (read :: String -> Int) x

logBase2 num = logBase 2 num

splitEvery _ [] = []
splitEvery n list = first : (splitEvery n rest)
  where
    (first,rest) = splitAt n list

convertBinToDec :: Integral i => i -> i
convertBinToDec 0 = 0
convertBinToDec i = 2 * convertBinToDec (div i 10) + (mod i 10)

replaceIthItem a (h:t) i = replaceIthItemh a 0 (h:t) i
replaceIthItemh a pos (h:t) i = if pos == i then (a:t) else h : replaceIthItemh a (pos+1) (t) i

fillZeros :: (Eq a, Num a) => [Char] -> a -> [Char] 
fillZeros x 0 = x 
fillZeros x a  = ('0' : fillZeros x (a-1))



getDataFromCache address cache "fullyAssoc" 0 = getDataFromCacheh (convertStringToInt address) cache "fullyAssoc" 0
getDataFromCacheh _ [] "fullyAssoc" 0 = NoOutput
getDataFromCacheh address ((It (T tag) (D dat) valid _ ): t) "fullyAssoc" 0 = if address==tag && valid then Out (dat, 4) else getDataFromCacheh tag (t) "fullyAssoc" 0 

main = do
putStrLn "Hello, World!"
print(getDataFromCache "000001" [] "fullyAssoc" 0)
